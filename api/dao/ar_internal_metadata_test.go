// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dao

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testArInternalMetadata(t *testing.T) {
	t.Parallel()

	query := ArInternalMetadata()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testArInternalMetadataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArInternalMetadataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ArInternalMetadata().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArInternalMetadataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArInternalMetadatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArInternalMetadataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ArInternalMetadatumExists(ctx, tx, o.Key)
	if err != nil {
		t.Errorf("Unable to check if ArInternalMetadatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ArInternalMetadatumExists to return true, but got false.")
	}
}

func testArInternalMetadataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	arInternalMetadatumFound, err := FindArInternalMetadatum(ctx, tx, o.Key)
	if err != nil {
		t.Error(err)
	}

	if arInternalMetadatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testArInternalMetadataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ArInternalMetadata().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testArInternalMetadataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ArInternalMetadata().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testArInternalMetadataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	arInternalMetadatumOne := &ArInternalMetadatum{}
	arInternalMetadatumTwo := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, arInternalMetadatumOne, arInternalMetadatumDBTypes, false, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}
	if err = randomize.Struct(seed, arInternalMetadatumTwo, arInternalMetadatumDBTypes, false, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = arInternalMetadatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = arInternalMetadatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ArInternalMetadata().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testArInternalMetadataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	arInternalMetadatumOne := &ArInternalMetadatum{}
	arInternalMetadatumTwo := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, arInternalMetadatumOne, arInternalMetadatumDBTypes, false, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}
	if err = randomize.Struct(seed, arInternalMetadatumTwo, arInternalMetadatumDBTypes, false, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = arInternalMetadatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = arInternalMetadatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func arInternalMetadatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ArInternalMetadatum) error {
	*o = ArInternalMetadatum{}
	return nil
}

func arInternalMetadatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ArInternalMetadatum) error {
	*o = ArInternalMetadatum{}
	return nil
}

func arInternalMetadatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ArInternalMetadatum) error {
	*o = ArInternalMetadatum{}
	return nil
}

func arInternalMetadatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ArInternalMetadatum) error {
	*o = ArInternalMetadatum{}
	return nil
}

func arInternalMetadatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ArInternalMetadatum) error {
	*o = ArInternalMetadatum{}
	return nil
}

func arInternalMetadatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ArInternalMetadatum) error {
	*o = ArInternalMetadatum{}
	return nil
}

func arInternalMetadatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ArInternalMetadatum) error {
	*o = ArInternalMetadatum{}
	return nil
}

func arInternalMetadatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ArInternalMetadatum) error {
	*o = ArInternalMetadatum{}
	return nil
}

func arInternalMetadatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ArInternalMetadatum) error {
	*o = ArInternalMetadatum{}
	return nil
}

func testArInternalMetadataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ArInternalMetadatum{}
	o := &ArInternalMetadatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum object: %s", err)
	}

	AddArInternalMetadatumHook(boil.BeforeInsertHook, arInternalMetadatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	arInternalMetadatumBeforeInsertHooks = []ArInternalMetadatumHook{}

	AddArInternalMetadatumHook(boil.AfterInsertHook, arInternalMetadatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	arInternalMetadatumAfterInsertHooks = []ArInternalMetadatumHook{}

	AddArInternalMetadatumHook(boil.AfterSelectHook, arInternalMetadatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	arInternalMetadatumAfterSelectHooks = []ArInternalMetadatumHook{}

	AddArInternalMetadatumHook(boil.BeforeUpdateHook, arInternalMetadatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	arInternalMetadatumBeforeUpdateHooks = []ArInternalMetadatumHook{}

	AddArInternalMetadatumHook(boil.AfterUpdateHook, arInternalMetadatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	arInternalMetadatumAfterUpdateHooks = []ArInternalMetadatumHook{}

	AddArInternalMetadatumHook(boil.BeforeDeleteHook, arInternalMetadatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	arInternalMetadatumBeforeDeleteHooks = []ArInternalMetadatumHook{}

	AddArInternalMetadatumHook(boil.AfterDeleteHook, arInternalMetadatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	arInternalMetadatumAfterDeleteHooks = []ArInternalMetadatumHook{}

	AddArInternalMetadatumHook(boil.BeforeUpsertHook, arInternalMetadatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	arInternalMetadatumBeforeUpsertHooks = []ArInternalMetadatumHook{}

	AddArInternalMetadatumHook(boil.AfterUpsertHook, arInternalMetadatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	arInternalMetadatumAfterUpsertHooks = []ArInternalMetadatumHook{}
}

func testArInternalMetadataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArInternalMetadataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(arInternalMetadatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArInternalMetadataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArInternalMetadataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArInternalMetadatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArInternalMetadataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ArInternalMetadata().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	arInternalMetadatumDBTypes = map[string]string{`Key`: `character varying`, `Value`: `character varying`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                          = bytes.MinRead
)

func testArInternalMetadataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(arInternalMetadatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(arInternalMetadatumColumns) == len(arInternalMetadatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testArInternalMetadataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(arInternalMetadatumColumns) == len(arInternalMetadatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ArInternalMetadatum{}
	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, arInternalMetadatumDBTypes, true, arInternalMetadatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(arInternalMetadatumColumns, arInternalMetadatumPrimaryKeyColumns) {
		fields = arInternalMetadatumColumns
	} else {
		fields = strmangle.SetComplement(
			arInternalMetadatumColumns,
			arInternalMetadatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ArInternalMetadatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testArInternalMetadataUpsert(t *testing.T) {
	t.Parallel()

	if len(arInternalMetadatumColumns) == len(arInternalMetadatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ArInternalMetadatum{}
	if err = randomize.Struct(seed, &o, arInternalMetadatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ArInternalMetadatum: %s", err)
	}

	count, err := ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, arInternalMetadatumDBTypes, false, arInternalMetadatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ArInternalMetadatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ArInternalMetadatum: %s", err)
	}

	count, err = ArInternalMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
